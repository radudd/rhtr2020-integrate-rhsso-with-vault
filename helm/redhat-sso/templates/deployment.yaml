apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sso.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "sso.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "sso.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        helm.sh/chart: {{ template "sso.chart" . }}
        app.kubernetes.io/name: {{ template "sso.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{ template "sso.annotations" . }}
        {{- if .Values.vault.enabled }}
        vault.hashicorp.com/role: sso
        vault.hashicorp.com/ca-key: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-vars_sso: "sso/vars"
        vault.hashicorp.com/agent-inject-template-vars_sso: |
          {{`{{ with secret "sso/vars" -}}
            {{ range $k, $v := .Data.data }}
                export {{ $k }}={{ $v }}
            {{ end }}
          {{- end }}`}}
        {{- end }}
    spec:
      {{ template "sso.affinity" . }}
      {{ template "sso.tolerations" . }}
      {{ template "sso.nodeselector" . }}
      # To be removed once image is rebuilt
      containers:
      - name: sso
        image: {{ .Values.images.sso.fqdn }}:{{ .Values.images.sso.tag }}
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: "/auth/realms/master"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
        {{- if .Values.vault.enabled }}
        command:
        - "sh"
        - "-c"
        - "source /vault/secrets/vars_sso && /opt/eap/bin/openshift-launch.sh"
        {{- end }}
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: "/auth/realms/master"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
        env:
        {{- if not .Values.vault.enabled }}
        - name: SSO_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              key: ssoUser
              name: {{ template "sso.fullname" . }}-secrets
        - name: SSO_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ssoPassword
              name: {{ template "sso.fullname" . }}-secrets
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: dbUser
              name: {{ template "sso.fullname" . }}-secrets
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: dbPassword
              name: {{ template "sso.fullname" . }}-secrets
        {{- end }}
        - name: DB_JNDI
          value: "java:jboss/datasources/KeycloakDS"
        - name: DB_SERVICE_PREFIX_MAPPING
          value: "{{ .Values.db.address }}=DB"
        - name: TX_DATABASE_PREFIX_MAPPING
          value: "{{ .Values.db.address }}=DB"
        - name: DB_DATABASE
          value: "{{ .Values.db.database }}"
        #- name: PROXY_ADDRESS_FORWARDING
        #  value: "true"
        - name: X509_CA_BUNDLE
          value: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
        - name: OPENSHIFT_DNS_PING_SERVICE_NAME
          value: "{{ template "sso.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
        - name: JGROUPS_PING_PROTOCOL
          value: dns.DNS_PING
        - name: DB_SCHEMA
          value: public
        - name: SSO_POSTGRESQL_SERVICE_PORT
          value: "5432"
        volumeMounts:
        - mountPath: /etc/x509/https
          name: ssl-certs
      volumes:
        - name: ssl-certs
          secret:
            secretName: {{ template "sso.fullname" . }}-ssl-certs
